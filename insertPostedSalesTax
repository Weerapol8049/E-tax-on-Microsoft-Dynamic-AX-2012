private void insertPostedSalesTax(boolean posted = false)
{
    CustTrans                               custTrans, custTransBalance;
    CustInvoiceJour                         custInvoiceJourTmp;
    projInvoiceJour                         projInvoiceJourTmp;
    BillingTableJIS                         billingTable;
    BillingLineJIS                          billingline;
    LogisticsPostalAddress                  postalAddress;
    TaxTransExtensionTH                     taxTransExtensionTH;
    GeneralJournalEntry                     generalJournalEntry;
    LedgerJournalTrans                      ledgerJournalTransTmp;
    LedgerTransVoucherLink                  ledgerTransVoucherLink;
    DimensionAttributeValueCombination      dimensionAttributeValueCombination;
    SubledgerVoucherGeneralJournalEntry     subledgerVoucherGeneralJournalEntry;
    RecId                                   voucherGroupId;

    str 20                                  currentDateTime;
    int                                     i=1;
    String50                                paymentTerms;
    Amount                                  invoiceAmount, overdueBalance, paymentAmount;

    currentDateTime = this.formatDateTimeStr(DateTimeUtil::utcNow());

    taxTransExtensionTH = taxTrans.taxTransExtensionTH();

    //if (posted)
    //{
        //select ledgerTransVoucherLink
            //where ledgerTransVoucherLink.Voucher == ledgerJournalTrans.Voucher;

        //select generalJournalEntry
        //where generalJournalEntry.SubledgerVoucher == ledgerJournalTrans.Voucher;

        //select ledgerJournalTransTmp
            //where ledgerJournalTransTmp.JournalNum == ledgerJournalTrans.JournalNum
                //&& ledgerJournalTransTmp.AccountType == LedgerJournalACType::Cust
                //&& ledgerJournalTransTmp.MarkedInvoice like "AI*"
            //join dimensionAttributeValueCombination
            //where dimensionAttributeValueCombination.RecId == ledgerJournalTransTmp.LedgerDimension
            //;
    //}
    //else
    {
        select generalJournalEntry
        where generalJournalEntry.SubledgerVoucher == taxTrans.Voucher;

        subledgerVoucherGeneralJournalEntry = subledgerVoucherGeneralJournalEntry::findByGeneralJournalEntry(generalJournalEntry);

        voucherGroupId = LedgerTransVoucherLink::findVoucherGroupId(subledgerVoucherGeneralJournalEntry.Voucher, subledgerVoucherGeneralJournalEntry.AccountingDate);
    //info(strFmt("%1 :: %2", voucherGroupId,  taxTrans.Voucher));
        select ledgerTransVoucherLink
            where ledgerTransVoucherLink.VoucherGroupId == voucherGroupId
                && ledgerTransVoucherLink.TransDate == subledgerVoucherGeneralJournalEntry.AccountingDate
                && ledgerTransVoucherLink.Voucher   != subledgerVoucherGeneralJournalEntry.Voucher
            join ledgerJournalTransTmp
            where ledgerJournalTransTmp.Voucher == ledgerTransVoucherLink.Voucher
                && ledgerJournalTransTmp.AccountType == LedgerJournalACType::Cust
                && ledgerJournalTransTmp.MarkedInvoice != ""
            join dimensionAttributeValueCombination
            where dimensionAttributeValueCombination.RecId == ledgerJournalTransTmp.LedgerDimension
        ;
    }

    custTablePaym   = CustTable::find(dimensionAttributeValueCombination.DisplayValue);
    accountNum      = custTablePaym.AccountNum;
    postalAddress   = LogisticsPostalAddress::findRecId(custTablePaym.postalAddressRecId());

    select custTrans
        where custTrans.Invoice like ledgerJournalTransTmp.MarkedInvoice
            join billingline
            where billingline.RefRecId == custTrans.RecId
            join billingTable
            where billingTable.BillingIdJIS == billingline.BillingIdJIS;

    select custInvoiceJourTmp
        where custInvoiceJourTmp.InvoiceId == ledgerJournalTransTmp.MarkedInvoice;

    if (custInvoiceJourTmp)
    {
        select custTransBalance
        where custTransBalance.Invoice == custInvoiceJourTmp.InvoiceId
            && custTransBalance.AccountNum == custInvoiceJourTmp.InvoiceAccount
            && custTransBalance.TransDate == custInvoiceJourTmp.InvoiceDate
            && custTransBalance.Voucher == custInvoiceJourTmp.LedgerVoucher;

        invoiceAmount = custInvoiceJourTmp.InvoiceAmount;
    }

    select projInvoiceJourTmp
        where projInvoiceJourTmp.ProjInvoiceId == ledgerJournalTransTmp.MarkedInvoice;

    if (projInvoiceJourTmp)
    {
        select custTransBalance
        where custTransBalance.Invoice == projInvoiceJourTmp.ProjInvoiceId
            && custTransBalance.AccountNum == projInvoiceJourTmp.InvoiceAccount
            && custTransBalance.TransDate == projInvoiceJourTmp.InvoiceDate
            && custTransBalance.Voucher == projInvoiceJourTmp.LedgerVoucher;

        invoiceAmount = projInvoiceJourTmp.InvoiceAmount;
    }

    overdueBalance = custTransBalance.remainAmountCur() + abs(TaxTrans.SourceBaseAmountCur) + abs(taxTrans.SourceRegulateAmountCur);
    paymentAmount  = abs(TaxTrans.SourceBaseAmountCur) + abs(taxTrans.SourceRegulateAmountCur);

    if (ledgerJournalTransTmp.PaymMode == "CASH")
        paymentTerms = "เงินสด";
    else if (ledgerJournalTransTmp.BankChequeNum != "")
        paymentTerms = "เช็ค";
    else if (ledgerJournalTransTmp.PaymMode == "" && ledgerJournalTransTmp.BankChequeNum == "")
        paymentTerms = "เงินโอน";

    documentHeader.clear();
    documentHeader.DataTypeId                   = "H";
    documentHeader.DocumentTypeCode             = documentType;// H1 - [T03] -
    documentHeader.PdfTemplateId                = StmEtaxReferenceLetter::find(documentType).Template;// H25
    documentHeader.DocumentName                 = StmEtaxReferenceLetter::find(documentType).Description;
    documentHeader.DocumentId                   = taxTransExtensionTH.TaxInvoiceId;// H3 - [T03] - เลขที่
    documentHeader.DocumentIssueDtm             = this.formatDateTimeStr(str2datetime(strFmt("%1 00:00:00", ledgerJournalTransTmp.TransDate), 123));// H4  - [T03] - วันที่
    documentHeader.CreatePurposeCode            = purposeCode;
    documentHeader.CreatePurpose                = purpose == "" ? StmEtaxPurposeCode::find(purposeCode).Description : purpose;
    documentHeader.SendEmail                    = NoYes::Yes;//Indicator ส่งเมลให้ลูกค้า
    documentHeader.DocumentRemark               = strReplace(ledgerJournalTransTmp.STMRemark, "\n", " ");// H15 - [T03] - หมายเหตุ

    if (purposeCode)
    {
        documentHeader.AdditionalRefAssignId        = taxTransExtensionTH.TaxInvoiceId;
        documentHeader.AdditionalRefIssueDtm        = this.formatDateTimeStr(str2datetime(strFmt("%1 00:00:00",taxTrans.TransDate), 123));
        documentHeader.AdditionalRefTypeCode        = documentType;
        documentHeader.AdditionalRefDocumentName    = "";
    }
    documentHeader.insert();

    refHeader = documentHeader.RecId;

    information.clear();
    information.DataTypeId                      = "B";
    information.RefRecId                        = refHeader;
    information.Id                              = custTablePaym.AccountNum;// B01 - [T03] - ชื่อลูกค้า
    information.Name                            = custTablePaym.name();// B02 - [T03] - ชื่อลูกค้า
    information.TaxIdType                       = custTablePaym.TaxNumTHJIS == "" ? "OTHR" : "TXID";
    information.TaxId                           = custTablePaym.TaxNumTHJIS == "" ?  "N/A" : custTablePaym.TaxNumTHJIS;
    information.BranchId                        = custTablePaym.TaxBranchTHJIS == "" ? "00000" : custTablePaym.TaxBranchTHJIS;
    information.PostCode                        = strLTrim(postalAddress.ZipCode);
    information.AddressLine1                    = this.address(postalAddress);
    information.CountryId                       = postalAddress.CountryRegionId == "THA" || postalAddress.CountryRegionId == "" ?
                                                        "TH" : postalAddress.CountryRegionId;
    information.URID                            = this.emailAddress(custTablePaym.AccountNum);//อีเมล
    information.insert();


    tradeLineItem.clear();
    tradeLineItem.DataTypeId                    = "L";
    tradeLineItem.LineId                        = int2str(i);// L01 - [T03] - ลำดับที่
    tradeLineItem.RefRecId                      = refHeader;
    tradeLineItem.ProductId                     = ledgerJournalTransTmp.MarkedInvoice;
    tradeLineItem.ProductName                   = ledgerJournalTransTmp.STMEtaxDescription;// L03 - [T03] - รายการ
    tradeLineItem.ProductDesc                   = "";
    tradeLineItem.ProductChargeAmount           = abs(invoiceAmount);// L10 -[T03] จำนวนเงิน mapping มาผิด
    tradeLineItem.ProductChargeCurrencyCode     = taxTrans.CurrencyCode;
    tradeLineItem.ProductQuantity               = 1;
    tradeLineItem.ProductRemark1                = strFmt("%1", overdueBalance);// L37 - [T03] ยอดคงค้าง

    //if (custInvoiceJourTmp)
        //tradeLineItem.ProductRemark1            = strFmt("%1", custInvoiceJourTmp.STMDisplay_Balance() + abs(TaxTrans.SourceBaseAmountCur) + abs(taxTrans.SourceRegulateAmountCur));// L37 - [T03] ยอดคงค้าง
     //if (projInvoiceJourTmp)
        //tradeLineItem.ProductRemark1            = strFmt("%1", projInvoiceJour.InvoiceAmount);// L37 - [T03] ยอดคงค้าง

    //// การตั้งค่าภาษีและการคิดภาษี
    tradeLineItem.LineTaxTypeCode               = "VAT";
    //tradeLineItem.LineTaxCalRate                = TaxGroupData::find(TaxTrans.TaxCode, TaxTrans.TaxCode).showTaxValue();
    tradeLineItem.LineBasisAmount               = abs(invoiceAmount);// L10 -[T03] จำนวนเงิน
    tradeLineItem.LineBasisCurrencyCode         = TaxTrans.CurrencyCode;
    //tradeLineItem.LineTaxCalAmount              = abs(TaxTrans.SourceTaxAmountCur);
    tradeLineItem.LineTaxCalCurrencyCode        = TaxTrans.CurrencyCode;

    // การคำนวณยอดรวม
    tradeLineItem.LineNetTotalAmount            = abs(TaxTrans.SourceBaseAmountCur);
    tradeLineItem.LineNetTotalCurrencyCode      = TaxTrans.CurrencyCode;
    tradeLineItem.LineNetIncludeTaxTotalAmount  = paymentAmount;// L35 -[T03] ยอดชำระ
    tradeLineItem.LineNetIncludeTaxTotalCurrencyCode = TaxTrans.CurrencyCode;
    tradeLineItem.insert();

    documentFooter.clear();
    documentFooter.DataTypeId                   = "F";
    documentFooter.RefRecId                     = refHeader;
    documentFooter.LineTotalCount               = i;
    documentFooter.InvoiceCurrencycode          = TaxTrans.CurrencyCode;
    documentFooter.TaxTypeCode1                 = "VAT";
    documentFooter.TaxCalRate1                  = strFmt("%1",TaxGroupData::find(TaxTrans.TaxCode, TaxTrans.TaxCode).showTaxValue());
    documentFooter.BasisAmount1                 = strFmt("%1",abs(TaxTrans.SourceBaseAmountCur));
    documentFooter.BasisCurrencyCode1           = TaxTrans.CurrencyCode;
    documentFooter.TaxCalAmount1                = strFmt("%1",abs(TaxTrans.SourceTaxAmountCur));
    documentFooter.TaxCalCurrencyCode1          = TaxTrans.CurrencyCode;
    documentFooter.PaymentTypeCode              = "";
    documentFooter.PaymentDescription           = paymentTerms;// F34 -[T03] - จ่ายโดย

    documentFooter.OriginalTotalAmount          = 0;
    documentFooter.OriginalTotalCurrencyCode    = "THB";
    documentFooter.AdjustedInformationAmount    = 0;
    documentFooter.AdjustedInformationCurrencyCode = "THB";

    documentFooter.LineTotalAmount              = abs(TaxTrans.SourceBaseAmountCur);
    documentFooter.LineTotalCurrencyCode        = TaxTrans.CurrencyCode;

    documentFooter.AllowanceTotalAmount         = 0;
    documentFooter.AllowanceTotalCurrencyCode   = "";
    documentFooter.ChargeTotalAmount            = 0;
    documentFooter.ChargeTotalCurrencyCode      = "";
    documentFooter.TaxBasisTotalAmount          = abs(TaxTrans.SourceBaseAmountCur);// F46 - [T03] รวมจำนวนเงินที่มีภาษีมูลค่าเพิ่ม
    documentFooter.TaxBasisTotalCurrencyCode    = TaxTrans.CurrencyCode;
    documentFooter.TaxTotalAmount               = abs(TaxTrans.SourceTaxAmountCur);// F48 - [T03] ภาษีมูลค่าเพิ่ม
    documentFooter.TaxTotalCurrencyCode         = TaxTrans.CurrencyCode;
    documentFooter.GrandTotalAmount             = abs(TaxTrans.SourceBaseAmountCur) + abs(TaxTrans.SourceTaxAmountCur);// F50 - [T03] รวมจำนวนเงินทั้งสิ้น
    documentFooter.GrandTotalCurrencyCode       = TaxTrans.CurrencyCode;
    documentFooter.DocumentRemark1              = ledgerJournalTransTmp.MarkedInvoice; // F70 - [T03] - เลขที่ใบแจ้งหนี้
    documentFooter.DocumentRemark2              = billingTable.BillingIdJIS; // F71 - [T03] - เลขที่ใบวางบิล
    documentFooter.DocumentRemark3              = paymentTerms == "เงินโอน" ? ledgerJournalTransTmp.STMBankName : ""; // F72 - [T03] - เงินโอน ธนาคาร
    documentFooter.DocumentRemark4              = paymentTerms == "เงินโอน" ? strFmt("%1",ledgerJournalTransTmp.TransDate) : ""; // F73 - [T03] - เงินโอน วันที่
    documentFooter.DocumentRemark5              = paymentTerms == "เช็ค" ? ledgerJournalTransTmp.STMBankName : ""; // F74 - [T03] - เช็ค ธนาคาร
    documentFooter.DocumentRemark6              = paymentTerms == "เช็ค" ? ledgerJournalTransTmp.BankChequeNum : ""; // F75 - [T03] - เช็ค เลขที่เช็ค
    //documentFooter.DocumentRemark7              = paymentTerms == "เช็ค" ? strFmt("%1",subStr(datetime2str(DateTimeUtil::addDays(ledgerJournalTransTmp.ReleaseDate, 1)), 1, 10) ) : ""; // F76 - [T03] - เช็ค วันที่
    documentFooter.DocumentRemark7              = paymentTerms == "เช็ค" ? strFmt("%1", ledgerJournalTransTmp.DocumentDate) : "";

    documentFooter.DocumentRemark8              = this.dateFormatMMDDYYYY(custTrans.TransDate);//strFmt("%1",str2Date(strFmt("%1",ledgerJournalTransTmp.TransDate), 123)); // F77 - [T03] - วันที่ใบแจ้งหนี้ formet mm/dd/yyyy แต่ออก report dd/MM/yyyy
    documentFooter.DocumentRemark9              = this.dateFormatMMDDYYYY(billingTable.BillingDate);//strFmt("%1",str2Date(strFmt("%1",billingTable.BillingDate), 123)); // F78 - [T03] - วันที่ใบวางบิล
    documentFooter.DocumentRemark10             = custTablePaym.phone(); // F79 - [T03] - โทร

    documentFooter.WithholdingtaxBasisAmount1   = ""; // F56 - [T03] - WHT
    documentFooter.WithholdingtaxBasisAmount2   = ""; // F61 - [T03] - WHT
    documentFooter.WithholdingtaxTaxAmount3     = ""; // F67 - [T03] - ยอดรวม WHT
    documentFooter.WithholdingtaxTotalAmount    = 0; // F68 - [T03] - จำนวนเงินที่รับชำระ
    documentFooter.insert();

    fileTrailer.clear();
    fileTrailer.DataTypeId              = "T";
    fileTrailer.RefRecId                = refHeader;
    fileTrailer.TotalDocumentCount      = 1;
    fileTrailer.insert();
}
